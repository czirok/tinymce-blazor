@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<div>
    @if (Inline)
    {
        <div @ref="Element" id="@Id"></div>
    }
    else
    {
        <textarea @ref="Element" id="@Id"></textarea>
    }
</div>

@code {

  private string _value = "";
  private string _text = "";
  private Dictionary<string, string> streamMap = new Dictionary<string, string>();
  private int _chunkSize = 10000;
  private bool _ready = false;
  private ElementReference Element;
  private Dictionary<string, object> blazorConf;

  [Parameter] public string Id { get; set; } = System.Guid.NewGuid().ToString();
  [Parameter] public bool Inline { get; set; } = false;
  [Parameter] public string ApiKey { get; set; } = "no-api-key";
  [Parameter] public string CloudChannel { get; set; } = "5";
  [Parameter] public string ScriptSrc { get; set; }
  [Parameter] public string InitialValue { get; set; }
  [Parameter] public string JsConfSrc { get; set; }
  [Parameter] public string ModelEvents { get; set; } = "change input undo redo";
  [Parameter] public Dictionary<string, object> Conf { get; set; } = new Dictionary<string, object>();
  [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();

  [Parameter] public string Value
  {
    get => _value;
    set
    {
      if (value != null && value != _value)
      {
        _value = value;
        _ = PushValue(value);
      }
    }
  }

  [Parameter] public EventCallback<string> ValueChanged { get; set; }

  [Parameter] public string Text
  {
    get => _text;
    set {}
  }

  [Parameter] public EventCallback<string> TextChanged { get; set; }

  [JSInvokable("GetValue")]
  public Task<string> ReturnValue()
  {
    return Task.FromResult(Value);
  }

  [JSInvokable("UpdateModel")]
  public void OnChangeContent(string streamId, int index, string val, int size)
  {
    PushChange(streamId, index, val, size, (content) => {
      _value = content;
      ValueChanged.InvokeAsync(content);
    });
  }

  [JSInvokable("UpdateText")]
  public void OnChangeText(string streamId, int index, string text, int size)
  {
    PushChange(streamId, index, text, size, (textContent) => {
      _text = textContent;
      TextChanged.InvokeAsync(textContent);
    });
  }

  public void PushChange(string streamId, int index, string content, int size, Action<string> callback) {
    string acc = "";
    bool remove = streamMap.TryGetValue(streamId, out acc);
    acc = acc + content;
    if (index == size)
    {
      if (remove) { streamMap.Remove(streamId); }
      callback(acc);
    }
    else
    {
      streamMap[streamId] = acc;
    }
  }

  [JSInvokable("Ready")]
  public void Ready()
  {
    _ready = true;
  }

  protected async Task PushValue(string nextVal)
  {
    int chunks = (nextVal.Length / _chunkSize) + 1;
    string streamId = String.Format("{0:d9}", (DateTime.Now.Ticks/10)%1000000000);
    for (int i = 0; i < chunks; i++) {
      string chunk = nextVal.Substring(_chunkSize * i, _chunkSize);
      await JSRuntime.InvokeVoidAsync("tinymceBlazorWrapper.updateValue", Id, streamId, chunk, i + 1, chunks);
    }
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      blazorConf = new Dictionary<string, object>();
      blazorConf.Add("inline", Inline);
      string tinySrc = ScriptSrc != null ? ScriptSrc : $"https://cdn.tiny.cloud/1/{ApiKey}/tinymce/{CloudChannel}/tinymce.min.js";
      blazorConf.Add("src", tinySrc);
      blazorConf.Add("jsConf", JsConfSrc);
      blazorConf.Add("modelEvents", ModelEvents);
      Dictionary<string, object> merged = Merge(Conf, AdditionalAttributes);
      blazorConf.Add("conf", merged);
      // TBD: Load the events
      foreach (KeyValuePair<string, object> kvp in AdditionalAttributes)
      {
        System.Diagnostics.Debug.WriteLine($"Found: {kvp.Key} with type {kvp.Value.GetType().ToString()}");
      }

      var dotNetReference = DotNetObjectReference.Create(this);
      await JSRuntime.InvokeVoidAsync("tinymceBlazorWrapper.init", Element, blazorConf, dotNetReference);
    }

  }

  // Or new Dictionary<string, object>() { d1, d2 }
  private static Dictionary<string, object> Merge(params Dictionary<string, object>[] dictionaries)
  {
    Dictionary<string, object> merged = new Dictionary<string, object>();
    foreach (Dictionary<string, object> d in dictionaries)
    {
      d.ToList().ForEach(pair => merged[pair.Key] = pair.Value);
    }
    return merged;
  }
}
